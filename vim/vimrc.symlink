let mapleader = ","

" Basic settings
set nocompatible
syntax enable
set encoding=utf-8
set showcmd
filetype plugin indent on

" Set Solarized dark color theme
set background=dark
color solarized

" Whitespace
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set backspace=indent,eol,start
set list listchars=tab:\ \ ,trail:Â·

" Line numbers
set number

" Automatically reload .vimrc anytime it's modified.
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Easily modify .vimrc and .gvimrc
nmap <leader>v :tabedit $MYVIMRC<CR>
nmap <leader>g :tabedit $MYGVIMRC<CR>

" Open todo.txt
nmap <leader>T :Todo<CR>

"" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Map Cmd+Alt+Arrow to move between tabs
map <D-M-right> gt
imap <D-M-right> <ESC> gt
map <D-M-left> gT
imap <D-M-left> <ESC> gT

" Map Ctrl+Arrow to move between splits.
map <C-left> <C-w>h
imap <C-left> <ESC> <C-w>h
map <C-down> <C-w>j
imap <C-down> <ESC> <C-w>j
map <C-up> <C-w>k
imap <C-up> <ESC> <C-w>k
map <C-right> <C-w>l
imap <C-right> <ESC> <C-w>l

" Also map Ctrl+h|j|k|l to move between splits
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

" NERDTree configuration
let NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$']
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Command-T configuration
let g:CommandTMaxHeight=20

" Macro to strip trailing whitespace using key command _$
function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

function! s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction

function! s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction

" make uses real tabs
au FileType make                                     set noexpandtab

" Thorfile, Rakefile, Vagrantfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Thorfile,config.ru}    set ft=ruby

" md, markdown, and mk are markdown and define buffer-local preview
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

au BufRead,BufNewFile *.txt call s:setupWrapping()

" make python follow PEP8 ( http://www.python.org/dev/peps/pep-0008/ )
au FileType python  set tabstop=4 textwidth=79

" Enable syntastic syntax checking
let g:syntastic_enable_signs=1
let g:syntastic_quiet_warnings=1

" Directories for swp files
set backupdir=~/.vim/backup
set directory=~/.vim/backup

" % to bounce from do to end etc.
runtime! macros/matchit.vim
