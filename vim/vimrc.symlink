" ------------------------------------------------------------------------------
" Load plugins
" ------------------------------------------------------------------------------

source ~/.vim/plugins.vim

" ------------------------------------------------------------------------------
" Basic settings
" ------------------------------------------------------------------------------

let mapleader = ","

syntax enable
set encoding=utf-8
set showcmd
filetype plugin indent on
set number

" Whitespace
set nowrap
set tabstop=2
set shiftwidth=2
set softtabstop=2
set expandtab
set backspace=indent,eol,start
set list listchars=tab:\ \ ,trail:Â·

" Searching
set hlsearch
set incsearch
set ignorecase
set smartcase

" Tab completion
set wildmode=list:longest,list:full
set wildignore+=*.o,*.obj,.git,*.rbc,*.class,.svn,vendor/gems/*

" Set Solarized dark color theme
set background=dark
color solarized

" ------------------------------------------------------------------------------
" Autocmd
" ------------------------------------------------------------------------------

" Automatically reload .vimrc anytime it's modified.
if has("autocmd")
  autocmd bufwritepost .vimrc source $MYVIMRC
endif

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
        \| exe "normal g'\"" | endif
endif

" ------------------------------------------------------------------------------
" Key mappings
" ------------------------------------------------------------------------------

" Easily modify .vimrc and .gvimrc
nmap <leader>v :tabedit $MYVIMRC<CR>
nmap <leader>g :tabedit $MYGVIMRC<CR>

" Toggle NERDTree
map <Leader>n <plug>NERDTreeTabsToggle<CR>

" Toggle comment/uncomment
vmap <Leader>c gc

" Use tab to increase and decrease indentation
vmap <tab> >gv
vmap <S-tab> <gv

" Adjust viewports to the same size
map <Leader>= <C-w>=
imap <Leader>= <Esc> <C-w>=

" Map Cmd+Alt+Arrow to move between tabs
map <D-M-right> gt
imap <D-M-right> <ESC> gt
map <D-M-left> gT
imap <D-M-left> <ESC> gT

" Map Ctrl+Arrow to move between splits.
map <C-left> <C-w>h
imap <C-left> <ESC> <C-w>h
map <C-down> <C-w>j
imap <C-down> <ESC> <C-w>j
map <C-up> <C-w>k
imap <C-up> <ESC> <C-w>k
map <C-right> <C-w>l
imap <C-right> <ESC> <C-w>l

" Also map Ctrl+h|j|k|l to move between splits
map <C-h> <C-w>h
map <C-j> <C-w>j
map <C-k> <C-w>k
map <C-l> <C-w>l

function! Preserve(command)
  " Preparation: save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  execute a:command
  " Clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" Macro to strip trailing whitespace using key command _$
nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>

" Macro to reindent using key command _=
nmap _= :call Preserve("normal gg=G")<CR>

" ------------------------------------------------------------------------------
" Language specific settings
" ------------------------------------------------------------------------------

" Hard wrap txt files
function! s:setupWrapping()
  set wrap
  set wm=2
  set textwidth=72
endfunction
au BufRead,BufNewFile *.txt call s:setupWrapping()

" md, markdown, and mk are markdown and define buffer-local preview
function! s:setupMarkup()
  call s:setupWrapping()
  map <buffer> <Leader>p :Mm <CR>
endfunction
au BufRead,BufNewFile *.{md,markdown,mdown,mkd,mkdn} call s:setupMarkup()

" Make uses real tabs
au FileType make set noexpandtab

" Thorfile, Rakefile, Vagrantfile, Podfile and Gemfile are Ruby
au BufRead,BufNewFile {Gemfile,Rakefile,Vagrantfile,Podfile,Thorfile,config.ru} set ft=ruby

" Python follows PEP8 (http://www.python.org/dev/peps/pep-0008/)
au FileType python set tabstop=4 textwidth=79

" Compile less files
au BufRead,BufNewFile *.less nnoremap <Leader>m :w <BAR> !lessc % > %:t:r.css<CR><space>

" ------------------------------------------------------------------------------
" NERDTree
" ------------------------------------------------------------------------------

autocmd! VimEnter * call s:CdIfDirectory(expand("<amatch>"))
autocmd! FocusGained * call s:UpdateNERDTree()
autocmd! WinEnter * call s:CloseIfOnlyNerdTreeLeft()

" Close all open buffers on entering a window if the only
" buffer that's left is the NERDTree buffer
function! s:CloseIfOnlyNerdTreeLeft()
  if exists("t:NERDTreeBufName")
    if bufwinnr(t:NERDTreeBufName) != -1
      if winnr("$") == 1
        q
      endif
    endif
  endif
endfunction

" If the parameter is a directory, cd into it
function! s:CdIfDirectory(directory)
  let explicitDirectory = isdirectory(a:directory)
  let directory = explicitDirectory || empty(a:directory)

  if explicitDirectory
    exe "cd " . fnameescape(a:directory)
  endif

  " Allows reading from stdin
  " ex: git diff | mvim -R -
  if strlen(a:directory) == 0 
    return
  endif

  if directory
    NERDTree
    wincmd p
    bd
  endif

  if explicitDirectory
    wincmd p
  endif
endfunction

" NERDTree utility function
function! s:UpdateNERDTree(...)
  let stay = 0

  if(exists("a:1"))
    let stay = a:1
  end

  if exists("t:NERDTreeBufName")
    let nr = bufwinnr(t:NERDTreeBufName)
    if nr != -1
      exe nr . "wincmd w"
      exe substitute(mapcheck("R"), "<CR>", "", "")
      if !stay
        wincmd p
      end
    endif
  endif

  if exists(":CommandTFlush") == 2
    CommandTFlush
  endif
endfunction

" Public NERDTree-aware versions of builtin functions
function! ChangeDirectory(dir, ...)
  execute "cd " . fnameescape(a:dir)
  let stay = exists("a:1") ? a:1 : 1

  NERDTree

  if !stay
    wincmd p
  endif
endfunction
